<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper    
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace속성:매퍼파일의 완전한경로 .xml는 생략 -->
<!-- ※ibatis와는 다르게 id값에 .(dot)를 사용 못한다. -->

<mapper namespace="mybatis.Match">
	<insert id="matchInsert" parameterType="java.util.Map" >
		INSERT INTO matching VALUES(SEQ_MATCHING.NEXTVAL,(select teamname from team where manager_id=#{id}),#{awayteam},#{stadium},#{date},#{time},default)
	</insert>
	<!-- 팀에 속했는지 확인 하기 위한 쿼리문 -->
	<select id="selectTeam2" parameterType="java.util.Map" resultType="int">
		SELECT COUNT(*) FROM teammember WHERE id=#{id}
	</select>
	<select id="teamSelectList" parameterType="java.util.Map" resultType="TeamDTO">
		<if test="manager == 0">
			SELECT * FROM team order by teamrating desc
		</if>
		<if test="manager != 0">
			SELECT t.*, ABS(t.teamrating - (select teamrating from team where manager_id=#{id})) as drating from team t where not teamname = (select teamname from team where manager_id=#{id}) 
			and category = (select category from team where manager_id=#{id}) order by drating
		</if> 
	</select>
	<select id="oneSelect" parameterType="java.util.Map" resultType="TeamDTO">
		SELECT * FROM team WHERE teamname = '${teamName}'
	</select>
	<!-- 해당 팀의 최근 5경기 뽑아오는 쿼리문 -->
	<select id="selectGamefive" parameterType="java.util.Map" resultType="Map">
		select * from (select * from gameschedule order by gamedate desc) where (teamname = #{teamName2} or awayteam=#{teamName2}) and
		<![CDATA[
		rownum <= 5 and gamestatus = 'finish'
		]]> 
	</select>
	<!-- 해당 팀의 같은 날짜 같은 시간에 경기가 잡혀있는지 확인하는 쿼리문 -->
	<select id="checkDateTime" parameterType="java.util.Map" resultType="int">
		select count(*) from matching where teamname = (select teamname from team where manager_id = '${id}') and reqdate = '${gameDate}' and time='${gameTime}' 
	</select>
	<!-- 해당 경기장의 같은 날짜 같은 시간에 매칭이 잡혀있는지 확인하는 쿼리문 -->
	<select id="checkDateTimeStadium" parameterType="java.util.Map" resultType="int">
		select count(*) from matching where stadium = #{stadium} and reqdate=#{gameDate} and time=#{gameTime}
	</select>
	<!-- 매니저인지 확인하는 쿼리문 -->
	<select id="checkManager" parameterType="java.util.Map" resultType="int">
		select count(*) from team where manager_id =#{id}
	</select>
	<!-- gameSchedule에서 gameStatus=wating 가져오기 -->
	<select id="selectGameSchedule" parameterType="java.util.Map" resultType="Map">
		select * from gameschedule where GAMESTATUS = 'waiting'
	</select>
	<!-- 종료 버튼을 누른 사람이 해당 팀의 팀장인지 -->
	<select id="isManager22" parameterType="java.util.Map" resultType="Map">
		select manager_id from team where teamname=#{hometeam} or teamname=#{awayteam}
	</select>
	<!-- 종료 버튼 누른 후 gameStatus를 inwaiting으로 변경 -->
	<update id="updateGameStatus" parameterType="java.util.Map">
		update gameschedule set GAMESTATUS = 'inwaiting',homescore=#{homescore},awayscore=#{awayscore} where gamedate=#{gamedate} and time=#{time} and stadium=#{stadium} 
	</update>
	<!-- gameSchedule gamestats inwating인 글의 개수 가져오기 -->
	<select id="selectInWaiting" parameterType="java.util.Map" resultType="int">
		select count(*) from gameschedule where gamestatus = 'inwaiting' and 
		(teamname= (select teamname from (select * from teammember order by regidate) where rownum = 1 and id=#{id}) 
		or awayteam = (select teamname from (select * from teammember order by regidate) where rownum = 1 and id=#{id}))
	</select>
	<!-- 상대가 finish누른 경기 기록들 가져오기 -->
	<select id="selectInwaiting" parameterType="java.util.Map" resultType="Map">
		select * from gameschedule where gamestatus = 'inwaiting' and (teamname = (select teamname from (select * from teammember order by regidate) where id=#{id} and rownum=1) or AWAYTEAM = (select teamname from (select * from teammember order by regidate) where id=#{id} and rownum=1))
	</select>
	<!-- 최종 finish누른 후 gameStatus를 finish로 바꾸기 -->
	<update id="updateGameStatus222" parameterType="java.util.Map">
		update gameschedule set gamestatus = 'finish' where no=#{no}
	</update>
	<!-- 매칭 신청한 팀의 팀원들 마일리지 +300 -->
	<update id="updateMileage" parameterType="java.util.Map">
		MERGE INTO member m USING teammember t ON (m.id = t.id)  WHEN MATCHED THEN UPDATE SET m.point = m.point+300 where t.teamname = (select teamname from team where team.manager_id=#{id})
	</update>
	<!-- 경기 종료 후 경기 결과에 따라 point update -->
	<update id="updatePoint" parameterType="java.util.Map">
		UPDATE member SET point = point + #{myMileage} WHERE id=#{id}
	</update>
</mapper>