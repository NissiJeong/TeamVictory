<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper    
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace속성:매퍼파일의 완전한경로 .xml는 생략 -->
<!-- ※ibatis와는 다르게 id값에 .(dot)를 사용 못한다. -->

<mapper namespace="mybatis.BaseBall_Hitter">
   
   <insert id="hitterInsert" parameterType="java.util.Map" >
      INSERT INTO basehitter(recordno,pa,ab,h,b2,b3,hr,rbi,sb,cs,bb,hbp,so,gdp,e,pos,horder,awayteam,gamedate,stadium,time) VALUES(basehitter_SEQ.NEXTVAL,#{baseball_pa},#{baseball_ab},#{baseball_h},#{baseball_b2},#{baseball_b3},#{baseball_hr},#{baseball_rbi},#{baseball_sb},#{baseball_cs},#{baseball_bb},#{baseball_hbp},#{baseball_so},#{baseball_gdp},#{baseball_e},#{baseball_pos},#{baseball_horder},#{baseball_awayteam},#{baseball_gamedate},#{baseball_stadium},#{baseball_time})
   </insert>
   
   <insert id="hitterInsertByPars" parameterType="java.util.Map" >
      INSERT INTO hitter(gamedate,stadium,time,id,pa,ab,r,h,hr,rbi,bb,hbp,so,gdp) 
      VALUES('19-01-01', '서울', HITTER_SEQ.NEXTVAL,#{ID},#{PA},#{AB},#{R},#{H},#{HR},#{RBI},#{BB},#{HBP},#{SO},#{GDP})
   </insert>
   
   
   <select id="hitterDetailViewForTeamName" parameterType="java.util.Map" resultType="java.util.Map">
       SELECT TEAMNAME TEAMNAMEFORMODAL, COUNT(TEAMNAME) COUNT FROM HITTER WHERE ID=#{USER_ID} GROUP BY TEAMNAME ORDER BY COUNT DESC
   </select>
   
   <select id="pitcherDetailViewForTeamName" parameterType="java.util.Map" resultType="java.util.Map">
       SELECT TEAMNAME TEAMNAMEFORMODAL, COUNT(TEAMNAME) COUNT FROM PITCHER WHERE ID=#{USER_ID} GROUP BY TEAMNAME ORDER BY COUNT DESC
   </select>
   
   <select id="hitterDetailView" parameterType="java.util.Map" resultType="java.util.Map">
      select sum(pa) sumpa,SUM(ab) sumab,SUM(h) sumh,SUM(b2) sumb2,SUM(b3) sumb3,SUM(hr) sumhr,SUM(r) sumr,
      SUM(rbi) sumrbi,SUM(sb) sumsb,SUM(cs) sumcs,SUM(bb) sumbb,SUM(hbp) sumhbp,SUM(so) sumso,
      SUM(gdp) sumgdp,SUM(e) sume from hitter where id=#{USER_ID}
   </select>
   
   <select id="pitcherDetailView" parameterType="java.util.Map" resultType="java.util.Map">
      select sum(w) sumw,sum(l) suml,sum(sv) sumsv,sum(hol) sumhol,sum(blsv) sumblsv,sum(ci) sumci, sum(co) sumco,
         sum(tbf) sumtbf,sum(pitch) sumpitch,sum(pr) sumpr,sum(per) sumper, sum(ph) sumph, sum(pb2) sumpb2,sum(pb3) sumpb3, 
         sum(phr) sumphr,sum(pbb) sumpbb,sum(phbp) sumphbp,sum(pso) sumpso
         from pitcher where id = #{USER_ID}
   </select>
   
   <select id="hitterDetailViewEachTeam" parameterType="java.util.Map" resultType="java.util.Map">
      select sum(pa) sumpa, SUM(ab) sumab, SUM(h) sumh, SUM(b2) sumb2,SUM(b3) sumb3,SUM(hr) sumhr,SUM(r) sumr,
      SUM(rbi) sumrbi,SUM(sb) sumsb,SUM(cs) sumcs,SUM(bb) sumbb,SUM(hbp) sumhbp,SUM(so) sumso,
      SUM(gdp) sumgdp,SUM(e) sume from hitter where id=#{USER_ID}  and teamname=#{TEAMNAME}
   </select>
   
   <select id="pitcherDetailViewEachTeam" parameterType="java.util.Map" resultType="java.util.Map">
      select sum(w) sumw,sum(l) suml,sum(sv) sumsv,sum(hol) sumhol,sum(blsv) sumblsv,sum(ci) sumci, sum(co) sumco,
         sum(tbf) sumtbf,sum(pitch) sumpitch,sum(pr) sumpr,sum(per) sumper, sum(ph) sumph, sum(pb2) sumpb2,sum(pb3) sumpb3, 
         sum(phr) sumphr,sum(pbb) sumpbb,sum(phbp) sumphbp,sum(pso) sumpso
         from pitcher where id = #{USER_ID} and teamname=#{TEAMNAME}
   </select>
   
   <select id="hitterCount" parameterType="java.util.Map" resultType="java.util.Map">
      select count(*) count from hitter where id=#{USER_ID}
   </select>
   
   <select id="hitterCountTeam" parameterType="java.util.Map" resultType="java.util.Map">
      select count(*) count from hitter where id=#{USER_ID} and teamname=#{TEAMNAME}
   </select>
   <select id="pitcherCount" parameterType="java.util.Map" resultType="java.util.Map">
      select count(*) count from pitcher where id=#{USER_ID}
   </select>
   
   <select id="pitcherCountTeam" parameterType="java.util.Map" resultType="java.util.Map">
      select count(*) count from pitcher where id=#{USER_ID} and teamname=#{TEAMNAME}
   </select>
   
   <select id="hitterSelectList" parameterType="java.util.Map" resultType="java.util.Map">
      select recordno, gamedate, stadium, time, id, name, teamname, pa, ab, h, b2, b3, hr, r, rbi, sb, cs, bb, hbp, so, gdp, e, pos, horder, sumpa, sumab, sumh, sumb2, sumb3, sumhr, sumr, sumrbi, sumsb, sumcs, sumbb, sumhbp, sumso, sumgdp, sume, W, L, SV,  HOL,BLSV, CI, CO, TBF, PITCH, PR, PER, PH, PB2, PB3, PHR, PBB, PHBP, PSO, SUMW, SUML, SUMSV, SUMHOL, SUMBLSV, SUMCI, SUMCO, SUMTBF, SUMPR , SUMPER, SUMPH, SUMPB2, SUMPB3, SUMPHR, SUMPBB, SUMPHBP, SUMPSO, AWAYTEAM, HOMELOGO, AWAYLOGO, HOMESCORE, AWAYSCORE, NVL(BACKNUMBER, 0) BACKNUMBER
         from
         (select rownum as recordno, aaaa.* from
         (select aaa.*, name, base_backnumber backnumber from
         (select aa.*, bb.awayteam, bb.homelogo, bb.awaylogo, bb.homescore, bb.awayscore from 
         (SELECT h.gamedate, h.stadium, h.time, h.id, h.teamname, pa, ab, h, b2, b3, hr, r, rbi, sb, cs, bb, hbp, so, gdp, e, pos, horder,SUMPA,SUMAB,SUMH,SUMB2,SUMB3,SUMHR,SUMR,SUMRBI,SUMSB,SUMCS,SUMBB,SUMHBP,SUMSO,SUMGDP,SUME,W, L, SV, HOL, BLSV, CI, CO, TBF,PITCH, PR, PER, PH, PB2, PB3, PHR, PBB, PHBP,PSO,SUMW,SUML,SUMSV,SUMHOL,SUMBLSV,SUMCI,SUMCO,SUMTBF,SUMPR,SUMPER,SUMPH,SUMPB2,SUMPB3,SUMPHR,SUMPBB,SUMPHBP,SUMPSO
         FROM 
         (select gamedate, stadium, time, id, teamname, pa, ab, h, b2, b3, hr, r, rbi, sb, cs, bb, hbp, so, gdp, e, pos, horder,SUM(PA) OVER(ORDER BY GAMEDATE, TIME) SUMPA,SUM(AB) OVER(ORDER BY GAMEDATE, TIME) SUMAB,SUM(H) OVER(ORDER BY GAMEDATE, TIME) SUMH,SUM(B2) OVER(ORDER BY GAMEDATE, TIME) SUMB2,SUM(B3) OVER(ORDER BY GAMEDATE, TIME) SUMB3,SUM(HR) OVER(ORDER BY GAMEDATE, TIME) SUMHR,SUM(R) OVER(ORDER BY GAMEDATE, TIME) SUMR,SUM(RBI) OVER(ORDER BY GAMEDATE, TIME) SUMRBI,SUM(SB) OVER(ORDER BY GAMEDATE, TIME) SUMSB,SUM(CS) OVER(ORDER BY GAMEDATE, TIME) SUMCS,SUM(BB) OVER(ORDER BY GAMEDATE, TIME) SUMBB,SUM(HBP) OVER(ORDER BY GAMEDATE, TIME) SUMHBP,SUM(SO) OVER(ORDER BY GAMEDATE, TIME) SUMSO,SUM(GDP) OVER(ORDER BY GAMEDATE, TIME) SUMGDP,SUM(E) OVER(ORDER BY GAMEDATE, TIME) SUME
         from hitter WHERE ID= #{USER_ID}  order by gamedate, time)
         h LEFT JOIN 
         (SELECT GAMEDATE, STADIUM, TIME, ID, TEAMNAME, W, L, SV, HOL, BLSV, CI, CO, TBF,PITCH, PR, PER, PH, PB2, PB3, PHR, PBB, PHBP,PSO,SUM(W) OVER(ORDER BY GAMEDATE, TIME) SUMW,SUM(L) OVER(ORDER BY GAMEDATE, TIME) SUML,SUM(SV) OVER(ORDER BY GAMEDATE, TIME) SUMSV,SUM(HOL) OVER(ORDER BY GAMEDATE, TIME) SUMHOL,SUM(BLSV) OVER(ORDER BY GAMEDATE, TIME) SUMBLSV,SUM(CI) OVER(ORDER BY GAMEDATE, TIME) SUMCI,SUM(CO) OVER(ORDER BY GAMEDATE, TIME) SUMCO,SUM(TBF) OVER(ORDER BY GAMEDATE, TIME) SUMTBF,SUM(PR) OVER(ORDER BY GAMEDATE, TIME) SUMPR,SUM(PER) OVER(ORDER BY GAMEDATE, TIME) SUMPER,SUM(PH) OVER(ORDER BY GAMEDATE, TIME) SUMPH,SUM(PB2) OVER(ORDER BY GAMEDATE, TIME) SUMPB2,SUM(PB3) OVER(ORDER BY GAMEDATE, TIME) SUMPB3,SUM(PHR) OVER(ORDER BY GAMEDATE, TIME) SUMPHR,SUM(PBB) OVER(ORDER BY GAMEDATE, TIME) SUMPBB,SUM(PHBP) OVER(ORDER BY GAMEDATE, TIME) SUMPHBP,SUM(PSO) OVER(ORDER BY GAMEDATE, TIME) SUMPSO
         from pitcher WHERE ID= #{USER_ID}  order by gamedate, time) 
         p on h.id=p.id and h.gamedate=p.gamedate and h.stadium=p.stadium and h.time=p.time
         where H.ID=#{USER_ID}
         ORDER BY h.GAMEDATE, h.TIME) aa 
         join 
         (select e.gamedate, e.stadium, e.time, e.teamname hometeam, e.awayteam awayteam, e.gamestatus, e.homescore, e.awayscore,e.myteamlogo homelogo, f.teamlogo awaylogo from
         (select c.gamedate, c.stadium, c.time, c.awayteam, c.gamestatus, c.homescore, c.awayscore, c.teamname, d.teamlogo myteamlogo from
         (select * from gameschedule) c join team d on c.teamname=d.teamname) e join team f on e.awayteam=f.teamname order by gamedate, time) bb
         on aa.gamedate=bb.gamedate and aa.time=bb.time and aa.stadium= bb.stadium) aaa 
         join  member bbb on aaa.id=bbb.id) aaaa )
         <![CDATA[
         where recordno<=(select count(*) from hitter where id=#{USER_ID}) AND 
         ]]>
         <![CDATA[
         RECORDNO>((SELECT COUNT(*) FROM HITTER WHERE ID=#{USER_ID}) -5)
         ]]>
         order by recordno desc
      
   <!--
   select ttt1.*, ttt2.W, ttt2.L, ttt2.SV, ttt2.HOL, ttt2.BLSV, ttt2.CI, ttt2.CO, ttt2.TBF, ttt2.PITCH, ttt2.PR, ttt2.PER, ttt2.PH, ttt2.PB2, ttt2.PB3, ttt2.PHR, ttt2.PBB, ttt2.PHBP, ttt2.PSO, ttt2.SUMW, ttt2.SUML, ttt2.SUMSV, ttt2.SUMHOL, ttt2.SUMBLSV, ttt2.SUMHOL, ttt2.SUMBLSV, ttt2.SUMCI, ttt2.SUMCO, ttt2.SUMTBF, ttt2.SUMPR, ttt2.SUMPER, ttt2.SUMPH, ttt2.SUMPB2, ttt2.SUMPB3, ttt2.SUMPHR, ttt2.SUMPBB, ttt2.SUMPHBP, ttt2.SUMPSO from
      (select tt1.*,tt2.name,tt2.base_backnumber backnumber from
          (SELECT t1.recordno, t1.gamedate, t1.stadium, t1.time, t1.id, t1.teamname, t1.pa, t1.ab, t1.h, t1.b2, t1.b3, t1.hr, t1.r, t1.rbi, t1.sb, t1.cs, t1.bb, t1.hbp, t1.so, t1.gdp, t1.e, t1.pos, t1.horder, t1.sumpa, t1.sumab, t1.sumh, t1.sumb2, t1.sumb3, t1.sumhr, t1.sumr, t1.sumrbi, t1.sumsb, t1.sumcs, t1.sumbb, t1.sumhbp, t1.sumso, t1.sumgdp, t1.sume, t2.awayteam, t2.homescore, t2.awayscore, t2.teamlogo, t2.awayteamlogo
          FROM (SELECT ROWNUM AS RECORDNO,  A.* FROM 
              (SELECT GAMEDATE, STADIUM, TIME, ID,TEAMNAME, PA, AB, H, B2, B3, HR, R, RBI, SB, CS, BB, HBP, SO, GDP, E, POS, HORDER,SUM(PA) OVER(ORDER BY GAMEDATE, TIME) SUMPA,SUM(AB) OVER(ORDER BY GAMEDATE, TIME) SUMAB,SUM(H) OVER(ORDER BY GAMEDATE, TIME) SUMH,SUM(B2) OVER(ORDER BY GAMEDATE, TIME) SUMB2,SUM(B3) OVER(ORDER BY GAMEDATE, TIME) SUMB3,SUM(HR) OVER(ORDER BY GAMEDATE, TIME) SUMHR,SUM(R) OVER(ORDER BY GAMEDATE, TIME) SUMR,SUM(RBI) OVER(ORDER BY GAMEDATE, TIME) SUMRBI,SUM(SB) OVER(ORDER BY GAMEDATE, TIME) SUMSB,SUM(CS) OVER(ORDER BY GAMEDATE, TIME) SUMCS,SUM(BB) OVER(ORDER BY GAMEDATE, TIME) SUMBB,SUM(HBP) OVER(ORDER BY GAMEDATE, TIME) SUMHBP,SUM(SO) OVER(ORDER BY GAMEDATE, TIME) SUMSO,SUM(GDP) OVER(ORDER BY GAMEDATE, TIME) SUMGDP,SUM(E) OVER(ORDER BY GAMEDATE, TIME) SUME FROM hitter
                  WHERE ID= #{USER_ID} ORDER BY GAMEDATE , time) A
                   <![CDATA[
                  WHERE ROWNUM <=(select count(*) from hitter WHERE ID=#{USER_ID} ) ) t1
                   ]]>
                  join (select g.gamedate, g.stadium, g.time, g.awayteam, g.homescore, g.awayscore, g.teamname, t.teamlogo,
                  (select teamlogo from team  where teamname = g.awayteam) awayteamlogo
                  from gameschedule g join team t on g.teamname = t.teamname
                  order by gamedate desc, time desc) t2
                  on t1.gamedate=t2.gamedate and t1.stadium=t2.stadium and t1.time =t2.time and t1.teamname=t2.teamname
                  <![CDATA[
                  WHERE RECORDNO > ((select count(*) from hitter WHERE ID=#{USER_ID} )- 5) 
                  ]]>
                  ORDER BY GAMEDATE DESC, TIME DESC) tt1
                  join member tt2 on tt1.id=tt2.id) ttt1
                  left join (SELECT GAMEDATE, STADIUM, TIME, ID,TEAMNAME, W, L, SV, HOL, BLSV, CI, CO, TBF,PITCH, PR, PER, PH, PB2, PB3, PHR, PBB, PHBP,PSO,SUM(W) OVER(ORDER BY GAMEDATE, TIME) SUMW,SUM(L) OVER(ORDER BY GAMEDATE, TIME) SUML,SUM(SV) OVER(ORDER BY GAMEDATE, TIME) SUMSV,SUM(HOL) OVER(ORDER BY GAMEDATE, TIME) SUMHOL,SUM(BLSV) OVER(ORDER BY GAMEDATE, TIME) SUMBLSV,SUM(CI) OVER(ORDER BY GAMEDATE, TIME) SUMCI,SUM(CO) OVER(ORDER BY GAMEDATE, TIME) SUMCO,SUM(TBF) OVER(ORDER BY GAMEDATE, TIME) SUMTBF,SUM(PR) OVER(ORDER BY GAMEDATE, TIME) SUMPR,SUM(PER) OVER(ORDER BY GAMEDATE, TIME) SUMPER,SUM(PH) OVER(ORDER BY GAMEDATE, TIME) SUMPH,SUM(PB2) OVER(ORDER BY GAMEDATE, TIME) SUMPB2,SUM(PB3) OVER(ORDER BY GAMEDATE, TIME) SUMPB3,SUM(PHR) OVER(ORDER BY GAMEDATE, TIME) SUMPHR,SUM(PBB) OVER(ORDER BY GAMEDATE, TIME) SUMPBB,SUM(PHBP) OVER(ORDER BY GAMEDATE, TIME) SUMPHBP,SUM(PSO) OVER(ORDER BY GAMEDATE, TIME) SUMPSO 
                  FROM pitcher) ttt2 on ttt1.gamedate=ttt2.gamedate and ttt1.time=ttt2.time and ttt1.stadium=ttt2.stadium
      -->
      
      <!--  
      select tt1.*,tt2.name,tt2.base_backnumber backnumber from
         (SELECT t1.recordno, t1.gamedate, t1.stadium, t1.time, t1.id, t1.teamname, t1.pa, t1.ab, t1.h, t1.b2, t1.b3, t1.hr, t1.r, t1.rbi, t1.sb, t1.cs, t1.bb, t1.hbp, t1.so, t1.gdp, t1.e, t1.pos, t1.horder, t1.sumpa, t1.sumab, t1.sumh, t1.sumb2, t1.sumb3, t1.sumhr, t1.sumr, t1.sumrbi, t1.sumsb, t1.sumcs, t1.sumbb, t1.sumhbp, t1.sumso, t1.sumgdp, t1.sume, t2.awayteam, t2.homescore, t2.awayscore, t2.teamlogo, t2.awayteamlogo
         FROM (SELECT ROWNUM AS RECORDNO,  A.* FROM 
             (SELECT GAMEDATE, STADIUM, TIME, ID,TEAMNAME, PA, AB, H, B2, B3, HR, R, RBI, SB, CS, BB, HBP, SO, GDP, E, POS, HORDER,SUM(PA) OVER(ORDER BY GAMEDATE, TIME) SUMPA,SUM(AB) OVER(ORDER BY GAMEDATE, TIME) SUMAB,SUM(H) OVER(ORDER BY GAMEDATE, TIME) SUMH,SUM(B2) OVER(ORDER BY GAMEDATE, TIME) SUMB2,SUM(B3) OVER(ORDER BY GAMEDATE, TIME) SUMB3,SUM(HR) OVER(ORDER BY GAMEDATE, TIME) SUMHR,SUM(R) OVER(ORDER BY GAMEDATE, TIME) SUMR,SUM(RBI) OVER(ORDER BY GAMEDATE, TIME) SUMRBI,SUM(SB) OVER(ORDER BY GAMEDATE, TIME) SUMSB,SUM(CS) OVER(ORDER BY GAMEDATE, TIME) SUMCS,SUM(BB) OVER(ORDER BY GAMEDATE, TIME) SUMBB,SUM(HBP) OVER(ORDER BY GAMEDATE, TIME) SUMHBP,SUM(SO) OVER(ORDER BY GAMEDATE, TIME) SUMSO,SUM(GDP) OVER(ORDER BY GAMEDATE, TIME) SUMGDP,SUM(E) OVER(ORDER BY GAMEDATE, TIME) SUME FROM hitter
                 WHERE ID= 'KIM12' ORDER BY GAMEDATE , time) A
                 <![CDATA[
                 WHERE ROWNUM <=(select count(*) from hitter WHERE ID='KIM12' ) ) t1
                 ]]>
                 join (select g.gamedate, g.stadium, g.time, g.awayteam, g.homescore, g.awayscore, g.teamname, t.teamlogo,
                 (select teamlogo from team  where teamname = g.awayteam) awayteamlogo
                 from gameschedule g join team t on g.teamname = t.teamname
                 order by gamedate desc, time desc) t2
                 on t1.gamedate=t2.gamedate and t1.stadium=t2.stadium and t1.time =t2.time and t1.teamname=t2.teamname
                 <![CDATA[
                 WHERE RECORDNO > ((select count(*) from hitter WHERE ID='KIM12' )- 5) 
                 ]]>
                 ORDER BY GAMEDATE DESC, TIME DESC) tt1
                    join member tt2 on tt1.id=tt2.id
             -->       
   </select>
   
   <select id="infiniteScrollDown" parameterType="java.util.Map" resultType="java.util.Map">
   
   select recordno, gamedate, stadium, time, id, name, teamname, pa, ab, h, b2, b3, hr, r, rbi, sb, cs, bb, hbp, so, gdp, e, pos, horder, sumpa, sumab, sumh, sumb2, sumb3, sumhr, sumr, sumrbi, sumsb, sumcs, sumbb, sumhbp, sumso, sumgdp, sume, NVL(W, -1) W,NVL(L, -1) L,NVL(SV, -1) SV,NVL(HOL, -1)  HOL,NVL(BLSV, -1) BLSV,NVL(CI, -1) CI,NVL(CO, -1) CO,NVL(TBF, -1) TBF,NVL(PITCH, -1) PITCH,NVL(PR, -1) PR,NVL(PER, -1) PER,NVL(PH, -1) PH,NVL(PB2, -1) PB2,NVL(PB3, -1) PB3,NVL(PHR, -1) PHR,NVL(PBB, -1) PBB,NVL(PHBP, -1) PHBP,NVL(PSO, -1) PSO,NVL(SUMW, -1) SUMW,NVL(SUML, -1) SUML,NVL(SUMSV, -1) SUMSV,NVL(SUMHOL, -1) SUMHOL,NVL(SUMBLSV, -1) SUMBLSV,NVL(SUMCI, -1) SUMCI,NVL(SUMCO, -1) SUMCO,NVL(SUMTBF, -1) SUMTBF,NVL(SUMPR, -1) SUMPR ,NVL(SUMPER, -1) SUMPER,NVL(SUMPH, -1) SUMPH,NVL(SUMPB2, -1) SUMPB2,NVL(SUMPB3, -1) SUMPB3,NVL(SUMPHR, -1) SUMPHR,NVL(SUMPBB, -1) SUMPBB,NVL(SUMPHBP, -1) SUMPHBP,NVL(SUMPSO, -1) SUMPSO, AWAYTEAM, HOMELOGO, AWAYLOGO, HOMESCORE, AWAYSCORE, NVL(BACKNUMBER, 0) BACKNUMBER
         from
         (select rownum as recordno, aaaa.* from
         (select aaa.*, name, base_backnumber backnumber from
         (select aa.*, bb.awayteam, bb.homelogo, bb.awaylogo, bb.homescore, bb.awayscore from 
         (SELECT h.gamedate, h.stadium, h.time, h.id, h.teamname, pa, ab, h, b2, b3, hr, r, rbi, sb, cs, bb, hbp, so, gdp, e, pos, horder,SUMPA,SUMAB,SUMH,SUMB2,SUMB3,SUMHR,SUMR,SUMRBI,SUMSB,SUMCS,SUMBB,SUMHBP,SUMSO,SUMGDP,SUME,W, L, SV, HOL, BLSV, CI, CO, TBF,PITCH, PR, PER, PH, PB2, PB3, PHR, PBB, PHBP,PSO,SUMW,SUML,SUMSV,SUMHOL,SUMBLSV,SUMCI,SUMCO,SUMTBF,SUMPR,SUMPER,SUMPH,SUMPB2,SUMPB3,SUMPHR,SUMPBB,SUMPHBP,SUMPSO
         FROM 
         (select gamedate, stadium, time, id, teamname, pa, ab, h, b2, b3, hr, r, rbi, sb, cs, bb, hbp, so, gdp, e, pos, horder,SUM(PA) OVER(ORDER BY GAMEDATE, TIME) SUMPA,SUM(AB) OVER(ORDER BY GAMEDATE, TIME) SUMAB,SUM(H) OVER(ORDER BY GAMEDATE, TIME) SUMH,SUM(B2) OVER(ORDER BY GAMEDATE, TIME) SUMB2,SUM(B3) OVER(ORDER BY GAMEDATE, TIME) SUMB3,SUM(HR) OVER(ORDER BY GAMEDATE, TIME) SUMHR,SUM(R) OVER(ORDER BY GAMEDATE, TIME) SUMR,SUM(RBI) OVER(ORDER BY GAMEDATE, TIME) SUMRBI,SUM(SB) OVER(ORDER BY GAMEDATE, TIME) SUMSB,SUM(CS) OVER(ORDER BY GAMEDATE, TIME) SUMCS,SUM(BB) OVER(ORDER BY GAMEDATE, TIME) SUMBB,SUM(HBP) OVER(ORDER BY GAMEDATE, TIME) SUMHBP,SUM(SO) OVER(ORDER BY GAMEDATE, TIME) SUMSO,SUM(GDP) OVER(ORDER BY GAMEDATE, TIME) SUMGDP,SUM(E) OVER(ORDER BY GAMEDATE, TIME) SUME
         from hitter WHERE ID= #{USER_ID}  order by gamedate, time)
         h LEFT JOIN 
         (SELECT GAMEDATE, STADIUM, TIME, ID, TEAMNAME, W, L, SV, HOL, BLSV, CI, CO, TBF,PITCH, PR, PER, PH, PB2, PB3, PHR, PBB, PHBP,PSO,SUM(W) OVER(ORDER BY GAMEDATE, TIME) SUMW,SUM(L) OVER(ORDER BY GAMEDATE, TIME) SUML,SUM(SV) OVER(ORDER BY GAMEDATE, TIME) SUMSV,SUM(HOL) OVER(ORDER BY GAMEDATE, TIME) SUMHOL,SUM(BLSV) OVER(ORDER BY GAMEDATE, TIME) SUMBLSV,SUM(CI) OVER(ORDER BY GAMEDATE, TIME) SUMCI,SUM(CO) OVER(ORDER BY GAMEDATE, TIME) SUMCO,SUM(TBF) OVER(ORDER BY GAMEDATE, TIME) SUMTBF,SUM(PR) OVER(ORDER BY GAMEDATE, TIME) SUMPR,SUM(PER) OVER(ORDER BY GAMEDATE, TIME) SUMPER,SUM(PH) OVER(ORDER BY GAMEDATE, TIME) SUMPH,SUM(PB2) OVER(ORDER BY GAMEDATE, TIME) SUMPB2,SUM(PB3) OVER(ORDER BY GAMEDATE, TIME) SUMPB3,SUM(PHR) OVER(ORDER BY GAMEDATE, TIME) SUMPHR,SUM(PBB) OVER(ORDER BY GAMEDATE, TIME) SUMPBB,SUM(PHBP) OVER(ORDER BY GAMEDATE, TIME) SUMPHBP,SUM(PSO) OVER(ORDER BY GAMEDATE, TIME) SUMPSO
         from pitcher WHERE ID= #{USER_ID}  order by gamedate, time) 
         p on h.id=p.id and h.gamedate=p.gamedate and h.stadium=p.stadium and h.time=p.time
         where H.ID=#{USER_ID}
         ORDER BY h.GAMEDATE, h.TIME) aa 
         join 
         (select e.gamedate, e.stadium, e.time, e.teamname hometeam, e.awayteam awayteam, e.gamestatus, e.homescore, e.awayscore,e.myteamlogo homelogo, f.teamlogo awaylogo from
         (select c.gamedate, c.stadium, c.time, c.awayteam, c.gamestatus, c.homescore, c.awayscore, c.teamname, d.teamlogo myteamlogo from
         (select * from gameschedule) c join team d on c.teamname=d.teamname) e join team f on e.awayteam=f.teamname order by gamedate, time) bb
         on aa.gamedate=bb.gamedate and aa.time=bb.time and aa.stadium= bb.stadium) aaa 
         join  member bbb on aaa.id=bbb.id) aaaa )
         <![CDATA[
         where recordno<= (#{RECORDNO } -1) AND 
         ]]>
         <![CDATA[
         RECORDNO>(#{RECORDNO } -1 -5)
         ]]>
         order by recordno desc
   
   </select>
   
   <!--          멤버 정보 변경할거임            -->
   
   
   <update id="profileChange" parameterType="java.util.Map">
      UPDATE member SET 
      profile = #{MEMBERPROFILE}, BIRTH = #{BIRTH},
      LOCATION=#{LOCATION},PHONE=#{PHONE}, LOCATION_2 = #{LOCATION_2} where ID = #{USER_ID}
   </update>
   
   <update id="playerChange" parameterType="java.util.Map">
      UPDATE member SET SCHOOL=#{SCHOOL},HEIGHT=#{HEIGHT}, WEIGHT=#{WEIGHT}, BASE_BACKNUMBER=#{BACKNUMBER}  where ID = #{USER_ID}
   </update>
   
   
   <select id="getProfile" parameterType="java.util.Map" resultType="java.util.Map">
      SELECT PROFILE, NAME, BASE_BACKNUMBER BACKNUMBER from MEMBER where ID = #{USER_ID}
   </select>
   
   <select id="memberInfo" parameterType="java.util.Map" resultType="java.util.Map">
      select * from member where id=#{USER_ID}

   </select>
   
   <select id="playerInfo" parameterType="java.util.Map" resultType="java.util.Map">
      select NVL(SCHOOL, ' ') SCHOOL,NVL(HEIGHT, 180) HEIGHT,NVL(WEIGHT, 70) WEIGHT, BASE_BACKNUMBER BACKNUMBER from member where id= #{USER_ID}
   </select>
   
   
    
   <select id="bettingInfo" parameterType="java.util.Map" resultType="java.util.Map">
    select aa.*, bb.point from
      (SELECT b.gamedate, b.stadium, b.time, b.id, mileage betmileage, teamname hometeam, awayteam, gamestatus, nvl(homescore,-1) homescore, nvl(awayscore,-1) awayscore, selectteam,
      (CASE WHEN SELECTTEAM=TEAMNAME THEN AWAYTEAM WHEN SELECTTEAM=AWAYTEAM THEN TEAMNAME ELSE  UNISTR('DRAW') END) AS deselectteam 
      FROM BETTING b join gameschedule g on b.gamedate=g.gamedate and b.stadium=g.stadium and b.time=g.time where id=#{USER_ID})
      aa join member bb on aa.id=bb.id
      where gamestatus='waiting'
   </select>
   <select id="getMileage" parameterType="java.util.Map" resultType="java.util.Map">
      select point mileage from member where id=#{USER_ID}
   </select>
   
   
   <select id="bettingInfo2" parameterType="java.util.Map" resultType="java.util.Map">
    select aa.*, bb.point from
      (SELECT b.gamedate, b.stadium, b.time, b.id, mileage betmileage, teamname hometeam, awayteam, gamestatus, nvl(homescore,-1) homescore, nvl(awayscore,-1) awayscore, selectteam,
      (CASE WHEN SELECTTEAM=TEAMNAME THEN AWAYTEAM WHEN SELECTTEAM=AWAYTEAM THEN TEAMNAME ELSE  UNISTR('DRAW') END) AS deselectteam 
      FROM BETTING b join gameschedule g on b.gamedate=g.gamedate and b.stadium=g.stadium and b.time=g.time where id=#{USER_ID})
      aa join member bb on aa.id=bb.id
      where gamestatus='finish'
   </select>
   
   <select id="getCount" parameterType="java.util.Map" resultType="java.util.Map">
    select count(*) count, SUM(MILEAGE) sum from betting where gamedate=#{GAMEDATE} and stadium=#{STADIUM} and time=#{TIME}
   </select>
   
   <select id="getRate" parameterType="java.util.Map" resultType="java.util.Map">
    select count(id) as memberCount , sum(mileage) totalMileage , selectteam 
          from betting
          where gamedate=#{GAMEDATE} and stadium=#{STADIUM} and time=#{TIME} and selectteam=#{SELECTTEAM}
          group by selectteam
   </select>
   
   
   
   <!-- 차트 js 구성 -->
   <select id="getMyHit" parameterType="java.util.Map" resultType="java.util.Map">
      select 
          NVL(sum(h) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) myta,
          NVL((sum(h)+sum(bb)+sum(hbp)) / DECODE(sum(pa), 0, NULL, sum(pa)), 0) mychul,  
          NVL(((sum(h)-sum(b2)-sum(b3)-sum(hr))*1+sum(b2)*2+sum(b3)*3+sum(hr)*4) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) myjang,
          NVL(sum(hr) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) myhomerun,
          NVL((( (sum(sb)+3 ) / (sum(sb) + sum(cs) + 7) - 0.4 ) * 20 +
           SQRT( NVL((sum(sb)+sum(cs)) / DECODE(( (sum(h)-sum(b2)-sum(b3)-sum(hr)) + sum(bb)+sum(hbp) ), 0, NULL, ( (sum(h)-sum(b2)-sum(b3)-sum(hr)) + sum(bb)+sum(hbp) )),0.49))/ 0.07 +
          NVL((sum(b3)/0.02) / DECODE((sum(ab) - sum(hr) - sum(so) ), 0, NULL, (sum(ab) - sum(hr) - sum(so) )), 1)  * 10 +
          (NVL((sum(r)-sum(hr)) / DECODE((sum(h)+sum(bb)-sum(hr)-sum(hbp) ), 0, NULL, (sum(h)+sum(bb)-sum(hr)-sum(hbp))), 0.5)-0.1 )/0.04 +
          (0.055 - NVL(sum(gdp) / DECODE((sum(ab)-sum(hr)-sum(so) ), 0, NULL, (sum(ab)-sum(hr)-sum(so) )), 0.005) ) /0.005 
          )/5, 0) myspeed,
          NVL((sum(h)+sum(bb)+sum(hbp)) / DECODE(sum(pa), 0, NULL, sum(pa)), 0)+NVL(((sum(h)-sum(b2)-sum(b3)-sum(hr))*1+sum(b2)*2+sum(b3)*3+sum(hr)*4) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) myhitting
          
          from hitter where id=#{USER_ID}
   </select>
   
   <select id="getAllHit" parameterType="java.util.Map" resultType="java.util.Map">
      select 
         NVL(sum(h) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) allta ,
         NVL((sum(h)+sum(bb)+sum(hbp)) / DECODE(sum(pa), 0, NULL, sum(pa)), 0) allchul,
         NVL(((sum(h)-sum(b2)-sum(b3)-sum(hr))*1+sum(b2)*2+sum(b3)*3+sum(hr)*4) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) alljang,
         NVL(sum(hr) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) allhomerun,
         NVL((( (sum(sb)+3 ) / (sum(sb) + sum(cs) + 7) - 0.4 ) * 20 +
           SQRT( NVL((sum(sb)+sum(cs)) / DECODE(( (sum(h)-sum(b2)-sum(b3)-sum(hr)) + sum(bb)+sum(hbp) ), 0, NULL, ( (sum(h)-sum(b2)-sum(b3)-sum(hr)) + sum(bb)+sum(hbp) )),0.49))/ 0.07 +
          NVL((sum(b3)/0.02) / DECODE((sum(ab) - sum(hr) - sum(so) ), 0, NULL, (sum(ab) - sum(hr) - sum(so) )), 1)  * 10 +
          (NVL((sum(r)-sum(hr)) / DECODE((sum(h)+sum(bb)-sum(hr)-sum(hbp) ), 0, NULL, (sum(h)+sum(bb)-sum(hr)-sum(hbp))), 0.5)-0.1 )/0.04 +
          (0.055 - NVL(sum(gdp) / DECODE((sum(ab)-sum(hr)-sum(so) ), 0, NULL, (sum(ab)-sum(hr)-sum(so) )), 0.005) ) /0.005 
          )/5, 0) allspeed,
         NVL((sum(h)+sum(bb)+sum(hbp)) / DECODE(sum(pa), 0, NULL, sum(pa)), 0)+NVL(((sum(h)-sum(b2)-sum(b3)-sum(hr))*1+sum(b2)*2+sum(b3)*3+sum(hr)*4) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) allhitting
         from hitter
   </select>
   
   <select id="getHitSigma" parameterType="java.util.Map" resultType="java.util.Map">
      select 
         stddev(tabyid) tasigma, 
         stddev(chulbyid) chulsigma,
         stddev(jangbyid) jangsigma,
         stddev(homerunbyid) homerunsigma,
         stddev(speedbyid) speedsigma,
         stddev(hittingbyid) hittingsigma
         from
         (select id,
         NVL(sum(h) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) tabyid ,
         NVL((sum(h)+sum(bb)+sum(hbp)) / DECODE(sum(pa), 0, NULL, sum(pa)), 0) chulbyid,
         NVL(((sum(h)-sum(b2)-sum(b3)-sum(hr))*1+sum(b2)*2+sum(b3)*3+sum(hr)*4) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) jangbyid, 
         NVL(sum(hr) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) homerunbyid,
         
         
        <!--  
         NVL((( (sum(sb)+3 ) / (sum(sb) + sum(cs) + 7) - 0.4 ) * 20 +
           SQRT( NVL((sum(sb)+sum(cs)) / DECODE(( (sum(h)-sum(b2)-sum(b3)-sum(hr)) + sum(bb)+sum(hbp) ), 0, NULL, ( (sum(h)-sum(b2)-sum(b3)-sum(hr)) + sum(bb)+sum(hbp) )),0.49))/ 0.07 +
          NVL((sum(b3)/0.02) / DECODE((sum(ab) - sum(hr) - sum(so) ), 0, NULL, (sum(ab) - sum(hr) - sum(so) )), 1)  * 10 +
          (NVL((sum(r)-sum(hr)) / DECODE((sum(h)+sum(bb)-sum(hr)-sum(hbp) ), 0, NULL, (sum(h)+sum(bb)-sum(hr)-sum(hbp))), 0.5)-0.1 )/0.04 +
          (0.055 - NVL(sum(gdp) / DECODE((sum(ab)-sum(hr)-sum(so) ), 0, NULL, (sum(ab)-sum(hr)-sum(so) )), 0.005) ) /0.005 
          )/5, 0) speedbyid
           -->
          3 speedbyid
          ,
          
          
         NVL((sum(h)+sum(bb)+sum(hbp)) / DECODE(sum(pa), 0, NULL, sum(pa)), 0)+NVL(((sum(h)-sum(b2)-sum(b3)-sum(hr))*1+sum(b2)*2+sum(b3)*3+sum(hr)*4) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) hittingbyid
         from hitter group by id)
   </select>
   
   <select id="getMyHitForTeam" parameterType="java.util.Map" resultType="java.util.Map">
      select 
          NVL(sum(h) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) myta,
          NVL((sum(h)+sum(bb)+sum(hbp)) / DECODE(sum(pa), 0, NULL, sum(pa)), 0) mychul,  
          NVL(((sum(h)-sum(b2)-sum(b3)-sum(hr))*1+sum(b2)*2+sum(b3)*3+sum(hr)*4) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) myjang,
          NVL(sum(hr) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) myhomerun,
          NVL((( (sum(sb)+3 ) / (sum(sb) + sum(cs) + 7) - 0.4 ) * 20 +
           SQRT( NVL((sum(sb)+sum(cs)) / DECODE(( (sum(h)-sum(b2)-sum(b3)-sum(hr)) + sum(bb)+sum(hbp) ), 0, NULL, ( (sum(h)-sum(b2)-sum(b3)-sum(hr)) + sum(bb)+sum(hbp) )),0.49))/ 0.07 +
          NVL((sum(b3)/0.02) / DECODE((sum(ab) - sum(hr) - sum(so) ), 0, NULL, (sum(ab) - sum(hr) - sum(so) )), 1)  * 10 +
          (NVL((sum(r)-sum(hr)) / DECODE((sum(h)+sum(bb)-sum(hr)-sum(hbp) ), 0, NULL, (sum(h)+sum(bb)-sum(hr)-sum(hbp))), 0.5)-0.1 )/0.04 +
          (0.055 - NVL(sum(gdp) / DECODE((sum(ab)-sum(hr)-sum(so) ), 0, NULL, (sum(ab)-sum(hr)-sum(so) )), 0.005) ) /0.005 
          )/5, 0) myspeed,
          NVL((sum(h)+sum(bb)+sum(hbp)) / DECODE(sum(pa), 0, NULL, sum(pa)), 0)+NVL(((sum(h)-sum(b2)-sum(b3)-sum(hr))*1+sum(b2)*2+sum(b3)*3+sum(hr)*4) / DECODE(sum(ab), 0, NULL, sum(ab)), 0) myhitting
          
          from hitter where id=#{USER_ID} and teamname = #{TEAMNAME}
   </select>
   
   
   <select id="getMyPit" parameterType="java.util.Map" resultType="java.util.Map">
      select 
         NVL((sum(ci)+sum(co)/3) / DECODE(count(*), 0, NULL, count(*)), 0) myinning,
         NVL(sum(pso) / DECODE(sum(pbb), 0, NULL, sum(pbb)), 0) mykbb,
         NVL((sum(ph)+sum(pbb)) / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0) mywhip,
         NVL(sum(per)*9 / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0)  myera,
         NVL(sum(phr)*9 / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0) myhomerun,
         NVL((sum(ph)+sum(pbb)+sum(phbp)) / DECODE(sum(tbf), 0, NULL, sum(tbf)), 0)+ NVL(((sum(ph)-sum(pb2)-sum(pb3)-sum(phr))*1+sum(pb2)*2+sum(pb3)*3+sum(phr)*4) / DECODE((sum(tbf)-sum(pbb)-sum(phbp)), 0, NULL, (sum(tbf)-sum(pbb)-sum(phbp))), 0) mypitching
         from pitcher where id=#{USER_ID}
   </select>
   
   <select id="getAllPit" parameterType="java.util.Map" resultType="java.util.Map">
      select 
         NVL((sum(ci)+sum(co)/3) / DECODE(count(*), 0, NULL, count(*)), 0) allinning,
         NVL(sum(pso) / DECODE(sum(pbb), 0, NULL, sum(pbb)), 0) allkbb,
         NVL((sum(ph)+sum(pbb)) / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0) allwhip,
         NVL(sum(per)*9 / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0)  allera,
         NVL(sum(phr)*9 / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0) allhomerun,
         NVL((sum(ph)+sum(pbb)+sum(phbp)) / DECODE(sum(tbf), 0, NULL, sum(tbf)), 0)+ NVL(((sum(ph)-sum(pb2)-sum(pb3)-sum(phr))*1+sum(pb2)*2+sum(pb3)*3+sum(phr)*4) / DECODE((sum(tbf)-sum(pbb)-sum(phbp)), 0, NULL, (sum(tbf)-sum(pbb)-sum(phbp))), 0) allpitching
         from pitcher
   </select>
   
   <select id="getPitSigma" parameterType="java.util.Map" resultType="java.util.Map">
      select 
         stddev(inningbyid) inningsigma,
         stddev(kbbbyid) kbbsigma,
         stddev(whipbyid) whipsigma,
         stddev(erabyid) erasigma,
         stddev(homerunbyid) homerunsigma,
         stddev(pitchingbyid) pitchingsigma
         from
         (select id,
         NVL((sum(ci)+sum(co)/3) / DECODE(count(*), 0, NULL, count(*)), 0) inningbyid,
         NVL(sum(pso) / DECODE(sum(pbb), 0, NULL, sum(pbb)), 0) kbbbyid,
         NVL((sum(ph)+sum(pbb)) / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0) whipbyid,
         NVL(sum(per)*9 / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0)  erabyid,
         NVL(sum(phr)*9 / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0) homerunbyid,
         NVL((sum(ph)+sum(pbb)+sum(phbp)) / DECODE(sum(tbf), 0, NULL, sum(tbf)), 0)+ NVL(((sum(ph)-sum(pb2)-sum(pb3)-sum(phr))*1+sum(pb2)*2+sum(pb3)*3+sum(phr)*4) / DECODE((sum(tbf)-sum(pbb)-sum(phbp)), 0, NULL, (sum(tbf)-sum(pbb)-sum(phbp))), 0) pitchingbyid
         from pitcher group by id)
   </select>
   
   <select id="getMyPitForTeam" parameterType="java.util.Map" resultType="java.util.Map">
      select 
         NVL((sum(ci)+sum(co)/3) / DECODE(count(*), 0, NULL, count(*)), 0) myinning,
         NVL(sum(pso) / DECODE(sum(pbb), 0, NULL, sum(pbb)), 0) mykbb,
         NVL((sum(ph)+sum(pbb)) / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0) mywhip,
         NVL(sum(per)*9 / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0)  myera,
         NVL(sum(phr)*9 / DECODE((sum(ci)+sum(co)/3), 0, NULL, (sum(ci)+sum(co)/3)), 0) myhomerun,
         NVL((sum(ph)+sum(pbb)+sum(phbp)) / DECODE(sum(tbf), 0, NULL, sum(tbf)), 0)+ NVL(((sum(ph)-sum(pb2)-sum(pb3)-sum(phr))*1+sum(pb2)*2+sum(pb3)*3+sum(phr)*4) / DECODE((sum(tbf)-sum(pbb)-sum(phbp)), 0, NULL, (sum(tbf)-sum(pbb)-sum(phbp))), 0) mypitching
         from pitcher where id=#{USER_ID} and teamname=#{TEAMNAME}
   </select>
   
   
   
   
   
</mapper>
